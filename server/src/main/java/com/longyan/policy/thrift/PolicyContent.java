package com.longyan.policy.thrift; /**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.EncodingUtils;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import javax.annotation.Generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2021-04-17")
public class PolicyContent implements org.apache.thrift.TBase<PolicyContent, PolicyContent._Fields>, java.io.Serializable, Cloneable, Comparable<PolicyContent> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("com.longyan.policy.thrift.PolicyContent");

  private static final org.apache.thrift.protocol.TField POLICY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("policy_id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("condition", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PolicyContentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PolicyContentTupleSchemeFactory());
  }

  public int policy_id; // required
  public String content; // required
  public String condition; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    POLICY_ID((short)1, "policy_id"),
    CONTENT((short)2, "content"),
    CONDITION((short)3, "condition");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // POLICY_ID
          return POLICY_ID;
        case 2: // CONTENT
          return CONTENT;
        case 3: // CONDITION
          return CONDITION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __POLICY_ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.POLICY_ID, new org.apache.thrift.meta_data.FieldMetaData("policy_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONDITION, new org.apache.thrift.meta_data.FieldMetaData("condition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PolicyContent.class, metaDataMap);
  }

  public PolicyContent() {
  }

  public PolicyContent(
    int policy_id,
    String content,
    String condition)
  {
    this();
    this.policy_id = policy_id;
    setPolicy_idIsSet(true);
    this.content = content;
    this.condition = condition;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PolicyContent(PolicyContent other) {
    __isset_bitfield = other.__isset_bitfield;
    this.policy_id = other.policy_id;
    if (other.isSetContent()) {
      this.content = other.content;
    }
    if (other.isSetCondition()) {
      this.condition = other.condition;
    }
  }

  public PolicyContent deepCopy() {
    return new PolicyContent(this);
  }

  @Override
  public void clear() {
    setPolicy_idIsSet(false);
    this.policy_id = 0;
    this.content = null;
    this.condition = null;
  }

  public int getPolicy_id() {
    return this.policy_id;
  }

  public PolicyContent setPolicy_id(int policy_id) {
    this.policy_id = policy_id;
    setPolicy_idIsSet(true);
    return this;
  }

  public void unsetPolicy_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POLICY_ID_ISSET_ID);
  }

  /** Returns true if field policy_id is set (has been assigned a value) and false otherwise */
  public boolean isSetPolicy_id() {
    return EncodingUtils.testBit(__isset_bitfield, __POLICY_ID_ISSET_ID);
  }

  public void setPolicy_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POLICY_ID_ISSET_ID, value);
  }

  public String getContent() {
    return this.content;
  }

  public PolicyContent setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public String getCondition() {
    return this.condition;
  }

  public PolicyContent setCondition(String condition) {
    this.condition = condition;
    return this;
  }

  public void unsetCondition() {
    this.condition = null;
  }

  /** Returns true if field condition is set (has been assigned a value) and false otherwise */
  public boolean isSetCondition() {
    return this.condition != null;
  }

  public void setConditionIsSet(boolean value) {
    if (!value) {
      this.condition = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case POLICY_ID:
      if (value == null) {
        unsetPolicy_id();
      } else {
        setPolicy_id((Integer)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case CONDITION:
      if (value == null) {
        unsetCondition();
      } else {
        setCondition((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case POLICY_ID:
      return getPolicy_id();

    case CONTENT:
      return getContent();

    case CONDITION:
      return getCondition();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case POLICY_ID:
      return isSetPolicy_id();
    case CONTENT:
      return isSetContent();
    case CONDITION:
      return isSetCondition();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PolicyContent)
      return this.equals((PolicyContent)that);
    return false;
  }

  public boolean equals(PolicyContent that) {
    if (that == null)
      return false;

    boolean this_present_policy_id = true;
    boolean that_present_policy_id = true;
    if (this_present_policy_id || that_present_policy_id) {
      if (!(this_present_policy_id && that_present_policy_id))
        return false;
      if (this.policy_id != that.policy_id)
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_condition = true && this.isSetCondition();
    boolean that_present_condition = true && that.isSetCondition();
    if (this_present_condition || that_present_condition) {
      if (!(this_present_condition && that_present_condition))
        return false;
      if (!this.condition.equals(that.condition))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_policy_id = true;
    list.add(present_policy_id);
    if (present_policy_id)
      list.add(policy_id);

    boolean present_content = true && (isSetContent());
    list.add(present_content);
    if (present_content)
      list.add(content);

    boolean present_condition = true && (isSetCondition());
    list.add(present_condition);
    if (present_condition)
      list.add(condition);

    return list.hashCode();
  }

  @Override
  public int compareTo(PolicyContent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPolicy_id()).compareTo(other.isSetPolicy_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPolicy_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.policy_id, other.policy_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCondition()).compareTo(other.isSetCondition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCondition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.condition, other.condition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("com.longyan.policy.thrift.PolicyContent(");
    boolean first = true;

    sb.append("policy_id:");
    sb.append(this.policy_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      sb.append(this.content);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("condition:");
    if (this.condition == null) {
      sb.append("null");
    } else {
      sb.append(this.condition);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PolicyContentStandardSchemeFactory implements SchemeFactory {
    public PolicyContentStandardScheme getScheme() {
      return new PolicyContentStandardScheme();
    }
  }

  private static class PolicyContentStandardScheme extends StandardScheme<PolicyContent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PolicyContent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // POLICY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.policy_id = iprot.readI32();
              struct.setPolicy_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CONDITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.condition = iprot.readString();
              struct.setConditionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PolicyContent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(POLICY_ID_FIELD_DESC);
      oprot.writeI32(struct.policy_id);
      oprot.writeFieldEnd();
      if (struct.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeString(struct.content);
        oprot.writeFieldEnd();
      }
      if (struct.condition != null) {
        oprot.writeFieldBegin(CONDITION_FIELD_DESC);
        oprot.writeString(struct.condition);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PolicyContentTupleSchemeFactory implements SchemeFactory {
    public PolicyContentTupleScheme getScheme() {
      return new PolicyContentTupleScheme();
    }
  }

  private static class PolicyContentTupleScheme extends TupleScheme<PolicyContent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PolicyContent struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPolicy_id()) {
        optionals.set(0);
      }
      if (struct.isSetContent()) {
        optionals.set(1);
      }
      if (struct.isSetCondition()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetPolicy_id()) {
        oprot.writeI32(struct.policy_id);
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
      if (struct.isSetCondition()) {
        oprot.writeString(struct.condition);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PolicyContent struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.policy_id = iprot.readI32();
        struct.setPolicy_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
      if (incoming.get(2)) {
        struct.condition = iprot.readString();
        struct.setConditionIsSet(true);
      }
    }
  }

}

