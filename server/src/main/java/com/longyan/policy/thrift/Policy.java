package com.longyan.policy.thrift; /**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.EncodingUtils;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import javax.annotation.Generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2021-04-17")
public class Policy implements org.apache.thrift.TBase<Policy, Policy._Fields>, java.io.Serializable, Cloneable, Comparable<Policy> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("com.longyan.policy.thrift.Policy");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField POLICY_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("policyTitle", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField POLICY_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("policyContent", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PolicyStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PolicyTupleSchemeFactory());
  }

  public int id; // required
  public PolicyTitle policyTitle; // required
  public PolicyContent policyContent; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    POLICY_TITLE((short)2, "policyTitle"),
    POLICY_CONTENT((short)3, "policyContent");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // POLICY_TITLE
          return POLICY_TITLE;
        case 3: // POLICY_CONTENT
          return POLICY_CONTENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POLICY_TITLE, new org.apache.thrift.meta_data.FieldMetaData("policyTitle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PolicyTitle.class)));
    tmpMap.put(_Fields.POLICY_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("policyContent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PolicyContent.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Policy.class, metaDataMap);
  }

  public Policy() {
  }

  public Policy(
    int id,
    PolicyTitle policyTitle,
    PolicyContent policyContent)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.policyTitle = policyTitle;
    this.policyContent = policyContent;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Policy(Policy other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetPolicyTitle()) {
      this.policyTitle = new PolicyTitle(other.policyTitle);
    }
    if (other.isSetPolicyContent()) {
      this.policyContent = new PolicyContent(other.policyContent);
    }
  }

  public Policy deepCopy() {
    return new Policy(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.policyTitle = null;
    this.policyContent = null;
  }

  public int getId() {
    return this.id;
  }

  public Policy setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public PolicyTitle getPolicyTitle() {
    return this.policyTitle;
  }

  public Policy setPolicyTitle(PolicyTitle policyTitle) {
    this.policyTitle = policyTitle;
    return this;
  }

  public void unsetPolicyTitle() {
    this.policyTitle = null;
  }

  /** Returns true if field policyTitle is set (has been assigned a value) and false otherwise */
  public boolean isSetPolicyTitle() {
    return this.policyTitle != null;
  }

  public void setPolicyTitleIsSet(boolean value) {
    if (!value) {
      this.policyTitle = null;
    }
  }

  public PolicyContent getPolicyContent() {
    return this.policyContent;
  }

  public Policy setPolicyContent(PolicyContent policyContent) {
    this.policyContent = policyContent;
    return this;
  }

  public void unsetPolicyContent() {
    this.policyContent = null;
  }

  /** Returns true if field policyContent is set (has been assigned a value) and false otherwise */
  public boolean isSetPolicyContent() {
    return this.policyContent != null;
  }

  public void setPolicyContentIsSet(boolean value) {
    if (!value) {
      this.policyContent = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case POLICY_TITLE:
      if (value == null) {
        unsetPolicyTitle();
      } else {
        setPolicyTitle((PolicyTitle)value);
      }
      break;

    case POLICY_CONTENT:
      if (value == null) {
        unsetPolicyContent();
      } else {
        setPolicyContent((PolicyContent)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case POLICY_TITLE:
      return getPolicyTitle();

    case POLICY_CONTENT:
      return getPolicyContent();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case POLICY_TITLE:
      return isSetPolicyTitle();
    case POLICY_CONTENT:
      return isSetPolicyContent();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Policy)
      return this.equals((Policy)that);
    return false;
  }

  public boolean equals(Policy that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_policyTitle = true && this.isSetPolicyTitle();
    boolean that_present_policyTitle = true && that.isSetPolicyTitle();
    if (this_present_policyTitle || that_present_policyTitle) {
      if (!(this_present_policyTitle && that_present_policyTitle))
        return false;
      if (!this.policyTitle.equals(that.policyTitle))
        return false;
    }

    boolean this_present_policyContent = true && this.isSetPolicyContent();
    boolean that_present_policyContent = true && that.isSetPolicyContent();
    if (this_present_policyContent || that_present_policyContent) {
      if (!(this_present_policyContent && that_present_policyContent))
        return false;
      if (!this.policyContent.equals(that.policyContent))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_policyTitle = true && (isSetPolicyTitle());
    list.add(present_policyTitle);
    if (present_policyTitle)
      list.add(policyTitle);

    boolean present_policyContent = true && (isSetPolicyContent());
    list.add(present_policyContent);
    if (present_policyContent)
      list.add(policyContent);

    return list.hashCode();
  }

  @Override
  public int compareTo(Policy other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPolicyTitle()).compareTo(other.isSetPolicyTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPolicyTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.policyTitle, other.policyTitle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPolicyContent()).compareTo(other.isSetPolicyContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPolicyContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.policyContent, other.policyContent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("com.longyan.policy.thrift.Policy(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("policyTitle:");
    if (this.policyTitle == null) {
      sb.append("null");
    } else {
      sb.append(this.policyTitle);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("policyContent:");
    if (this.policyContent == null) {
      sb.append("null");
    } else {
      sb.append(this.policyContent);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (policyTitle != null) {
      policyTitle.validate();
    }
    if (policyContent != null) {
      policyContent.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PolicyStandardSchemeFactory implements SchemeFactory {
    public PolicyStandardScheme getScheme() {
      return new PolicyStandardScheme();
    }
  }

  private static class PolicyStandardScheme extends StandardScheme<Policy> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Policy struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // POLICY_TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.policyTitle = new PolicyTitle();
              struct.policyTitle.read(iprot);
              struct.setPolicyTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // POLICY_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.policyContent = new PolicyContent();
              struct.policyContent.read(iprot);
              struct.setPolicyContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Policy struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.policyTitle != null) {
        oprot.writeFieldBegin(POLICY_TITLE_FIELD_DESC);
        struct.policyTitle.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.policyContent != null) {
        oprot.writeFieldBegin(POLICY_CONTENT_FIELD_DESC);
        struct.policyContent.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PolicyTupleSchemeFactory implements SchemeFactory {
    public PolicyTupleScheme getScheme() {
      return new PolicyTupleScheme();
    }
  }

  private static class PolicyTupleScheme extends TupleScheme<Policy> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Policy struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetPolicyTitle()) {
        optionals.set(1);
      }
      if (struct.isSetPolicyContent()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetPolicyTitle()) {
        struct.policyTitle.write(oprot);
      }
      if (struct.isSetPolicyContent()) {
        struct.policyContent.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Policy struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.policyTitle = new PolicyTitle();
        struct.policyTitle.read(iprot);
        struct.setPolicyTitleIsSet(true);
      }
      if (incoming.get(2)) {
        struct.policyContent = new PolicyContent();
        struct.policyContent.read(iprot);
        struct.setPolicyContentIsSet(true);
      }
    }
  }

}

